//
//  File.swift
//  
//
//  Created by Alexey Dubovskoy on 09/08/2021.
//

import Foundation
import ArgumentParser
import ZIPFoundation

extension Cook {

    struct Seed: ParsableCommand {

        @Argument(help: "Path")
        var seedDirectoryPath: String?

        static var configuration: CommandConfiguration = CommandConfiguration(abstract: "Populate directory with seed recipes")

        func run() throws {
            var path: String
            let seed = ""

            if let c = seedDirectoryPath {
                path = c
            } else {
                path = FileManager.default.currentDirectoryPath
            }

            let destinationURL = URL(fileURLWithPath: path)
            let archive = Archive(data: Data(base64Encoded: seed)!, accessMode: .read)!

            do {
                try FileManager.default.createDirectory(at: destinationURL, withIntermediateDirectories: true, attributes: nil)
                try FileManager.default.unzipArchive(archive: archive, to: destinationURL)

                print("Extracted seed to \(path)")
            } catch {
                print(error, to: &errStream)

                throw ExitCode.failure
            }

        }
    }
}
